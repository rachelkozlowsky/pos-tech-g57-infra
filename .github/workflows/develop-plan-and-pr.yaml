name: "Plan and Create PR to Main"

on:
  push:
    branches:
      - 'develop'
  pull_request:
    branches:
      - 'main'

jobs:
  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -input=false -out=tfplan
          terraform show -no-color tfplan > tfplan.txt
        continue-on-error: true

      - name: Update PR with Plan
        if: github.event_name == 'pull_request'
        run: |
          PLAN=$(cat tfplan.txt)
          PLAN_ESCAPED=$(echo "$PLAN" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
          PAYLOAD=$(cat << EOF
          {
            "body": "### Terraform Plan üìñ\n\n<details><summary>Show Plan</summary>\n\n\`\`\`terraform\n${PLAN}\n\`\`\`\n\n</details>\n\n*Pushed by: @${{ github.actor }}*"
          }
          EOF
          )
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "$PAYLOAD" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"

  create-pr-to-main:
    name: "Create PR to Main"
    needs: terraform-plan
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push' && success()
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Create PR using GitHub API
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
          REPO: ${{ github.repository }}
          HEAD_REF: ${{ github.ref_name }}
        run: |
          # Gera um timestamp para o branch de release
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          RELEASE_BRANCH="release/$TIMESTAMP"
          
          # Cria um branch de release
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git checkout -b $RELEASE_BRANCH
          git push origin $RELEASE_BRANCH
          
          # Cria o PR usando a API do GitHub
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$REPO/pulls" \
            -d '{
            "title": "Release: Merge develop to main",
            "body": "## Descri√ß√£o\nEste PR foi criado automaticamente para promover as altera√ß√µes de develop para main.\n\n### Verifica√ß√µes\n- [ ] O c√≥digo foi revisado\n- [ ] Os testes passaram\n- [ ] O plano do Terraform foi aprovado\n\n**Nota:** Este PR requer aprova√ß√£o manual antes do merge.",
            "head": "'"$RELEASE_BRANCH"'",
            "base": "main"
          }'
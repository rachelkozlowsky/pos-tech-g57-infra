name: "Create PR to Main"

on:
  push:
    branches:
      - 'develop'

jobs:
  create-pr-to-main:
    name: "Create PR to Main"
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write
      statuses: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git config --global --add safe.directory /github/workspace

      - name: Get latest tag
        id: get_latest_tag
        run: |
          # Pega a tag mais recente
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          # Extrai o n√∫mero da vers√£o (remove o 'v' do in√≠cio)
          VERSION_NUMBER=${LATEST_TAG#v}
          # Incrementa o patch version
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION_NUMBER"
          NEW_PATCH_VERSION=$((VERSION_PARTS[2] + 1))
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$NEW_PATCH_VERSION"
          
          echo "Current version: $LATEST_TAG"
          echo "New version: v$NEW_VERSION"
          
          echo "NEW_VERSION=v$NEW_VERSION" >> $GITHUB_ENV
          echo "NEW_VERSION_SIMPLE=$NEW_VERSION" >> $GITHUB_ENV

      - name: Check for existing PR
        id: check-pr
        uses: actions/github-script@v6
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: 'develop',
              base: 'main'
            });
            
            if (prs.length > 0) {
              console.log(`Found existing PR #${prs[0].number}`);
              core.setOutput('pr_number', prs[0].number.toString());
              core.setOutput('pr_exists', 'true');
            } else {
              core.setOutput('pr_number', '0');
              core.setOutput('pr_exists', 'false');
            }

      - name: Create or Update PR
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        run: |
          PR_TITLE="Release v${{ env.NEW_VERSION_SIMPLE }}: Merge develop to main"
          PR_BODY="## Descri√ß√£o\nEste PR foi criado automaticamente para promover as altera√ß√µes de develop para main.\n\n## Mudan√ßas\n- Atualiza√ß√µes de infraestrutura\n- Corre√ß√µes de bugs\n\n##**"
          
          if [ "${{ steps.check-pr.outputs.pr_exists }}" == "false" ]; then
            echo "Creating new PR"
          
            # Cria o PR diretamente de develop para main
            curl -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/pulls" \
              -d '{"title":"'"$PR_TITLE"'","body":"'"$PR_BODY"'","head":"develop","base":"main"}'
          else
            echo "Updating existing PR #${{ steps.check-pr.outputs.pr_number }}"
          
            # Atualiza o PR existente
            curl -X PATCH \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/${{ steps.check-pr.outputs.pr_number }}" \
              -d '{"title":"'"$PR_TITLE"'","body":"'"$PR_BODY"'"}'
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        if: steps.check-pr.outputs.pr_exists == 'true'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init and Plan
        if: steps.check-pr.outputs.pr_exists == 'true'
        run: |
          cd infra
          terraform init
          terraform plan -no-color -out=tfplan
          terraform show -no-color tfplan > tfplan.txt

      - name: Add Plan Comment to PR
        if: steps.check-pr.outputs.pr_exists == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            try {
              const plan = fs.readFileSync('infra/tfplan.txt', 'utf8');
            
              // Primeiro, tenta encontrar um coment√°rio existente
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ steps.check-pr.outputs.pr_number }}
              });
            
              const existingComment = comments.find(comment => 
                comment.user.login === 'github-actions[bot]' && 
                comment.body.includes('Terraform Plan')
              );
            
              const commentBody = `### Terraform Plan üìñ\n\n<details><summary>Show Plan</summary>\n\n\`\`\`terraform\n${plan}\n\`\`\`\n\n</details>\n\n*Pushed by: @${{ github.actor }}, GitHub Actions*`;
            
              if (existingComment) {
                // Atualiza o coment√°rio existente
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: commentBody
                });
              } else {
                // Cria um novo coment√°rio
                await github.rest.issues.createComment({
                  issue_number: ${{ steps.check-pr.outputs.pr_number }},
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: commentBody
                });
              }
            } catch (error) {
              core.error('Failed to add plan comment: ' + error.message);
              core.setFailed(error.message);
            }
name: "Plan and Create PR to Main"

on:
  push:
    branches:
      - 'develop'
  pull_request:
    branches:
      - 'main'

jobs:
  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./infra

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -input=false -out=tfplan
          terraform show -no-color tfplan > tfplan.txt

      - name: Update PR with Plan
        if: github.event_name == 'pull_request'
        run: |
          PLAN=$(cat tfplan.txt)
          PAYLOAD=$(jq -n \
            --arg plan "$PLAN" \
            --arg actor "${{ github.actor }}" \
            '{
              body: ("### Terraform Plan ðŸ“–\n\n<details><summary>Show Plan</summary>\n\n```terraform\n" + $plan + "\n```\n\n</details>\n\n*Pushed by: @" + $actor + "*")
            }')
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "$PAYLOAD" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"

  create-pr-to-main:
    name: "Create or Update PR to Main"
    needs: terraform-plan
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push' && success()
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_TOKEN }}

      - name: Get existing PRs
        id: get-prs
        run: |
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.PERSONAL_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?state=open&base=main")
          
          # Verifica se jÃ¡ existe um PR aberto
          PR_NUMBER=$(echo "$RESPONSE" | jq '.[0].number // empty')
          PR_HEAD_REF=$(echo "$RESPONSE" | jq -r '.[0].head.ref // empty')
          
          if [ -n "$PR_NUMBER" ]; then
            echo "Found existing PR #$PR_NUMBER"
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "pr_head_ref=$PR_HEAD_REF" >> $GITHUB_OUTPUT
          fi

      - name: Create or Update PR
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          # ObtÃ©m a versÃ£o atual
          CURRENT_VERSION=$(cat VERSION || echo "0.1.0")
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          NEXT_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          
          # Configura o Git
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          if [ -n "${{ steps.get-prs.outputs.pr_number }}" ]; then
            echo "Updating existing PR #${{ steps.get-prs.outputs.pr_number }}"
          
            # Atualiza o branch existente
            git checkout "${{ steps.get-prs.outputs.pr_head_ref }}"
            git merge --no-ff develop -m "chore: merge develop into release branch"
            git push origin "${{ steps.get-prs.outputs.pr_head_ref }}"
          
            # Atualiza o tÃ­tulo e o corpo do PR existente
            curl -X PATCH \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$REPO/pulls/${{ steps.get-prs.outputs.pr_number }}" \
              -d '{
                "title": "Release v'$NEXT_VERSION': Merge develop to main (Updated)",
                "body": "## DescriÃ§Ã£o\nEste PR foi atualizado automaticamente com as Ãºltimas alteraÃ§Ãµes de develop.\n\n### VersÃ£o: v'$NEXT_VERSION'\n\n### VerificaÃ§Ãµes\n- [ ] O cÃ³digo foi revisado\n- [ ] Os testes passaram\n- [ ] O plano do Terraform foi aprovado\n\n**Nota:** Este PR requer aprovaÃ§Ã£o manual antes do merge."
              }'
          else
            echo "Creating new PR"
            # Gera um timestamp para o branch de release
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            RELEASE_BRANCH="release/$TIMESTAMP"
          
            # Cria e faz push do branch de release
            git checkout -b "$RELEASE_BRANCH" develop
            git push -u origin "$RELEASE_BRANCH"
          
            # Cria o PR usando a API do GitHub
            curl -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/$REPO/pulls" \
              -d '{
                "title": "Release v'$NEXT_VERSION': Merge develop to main",
                "body": "## DescriÃ§Ã£o\nEste PR foi criado automaticamente para promover as alteraÃ§Ãµes de develop para main.\n\n### VersÃ£o: v'$NEXT_VERSION'\n\n### VerificaÃ§Ãµes\n- [ ] O cÃ³digo foi revisado\n- [ ] Os testes passaram\n- [ ] O plano do Terraform foi aprovado\n\n**Nota:** Este PR requer aprovaÃ§Ã£o manual antes do merge.",
                "head": "'$RELEASE_BRANCH'",
                "base": "main"
              }'
          fi
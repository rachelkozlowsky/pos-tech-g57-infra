name: "Apply to Production"

on:
  push:
    branches:
      - 'main'
    paths:
      - 'infra/**'  # Só executa quando houver mudanças na pasta infra

jobs:
  terraform-apply:
    name: "Terraform Apply"
    runs-on: ubuntu-latest

    # Verifica se houve mudanças na pasta infra usando git diff
    if: >
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' &&
      (contains(github.event.commits[0].added, 'infra/') ||
       contains(github.event.commits[0].modified, 'infra/') ||
       contains(github.event.commits[0].removed, 'infra/') ||
       contains(github.event.commits[*].added, 'infra/') ||
       contains(github.event.commits[*].modified, 'infra/') ||
       contains(github.event.commits[*].removed, 'infra/'))

    defaults:
      run:
        working-directory: ./infra

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Necessário para o git diff funcionar corretamente

      - name: Check for infra changes
        id: check-changes
        run: |
          # Verifica se houve mudanças na pasta infra
          if [ -n "$(git diff --name-only HEAD^ HEAD -- infra/)" ]; then
            echo "Changes detected in infra/ directory"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No changes in infra/ directory"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        if: steps.check-changes.outputs.has_changes == 'true'
        run: terraform init

      - name: Terraform Plan
        if: steps.check-changes.outputs.has_changes == 'true'
        id: plan
        run: terraform plan -no-color -input=false

      # - name: Terraform Apply
      #   if: steps.check-changes.outputs.has_changes == 'true'
      #   run: terraform apply -auto-approve -input=false

  notify-deployment:
    name: "Notify Deployment Status"
    needs: [terraform-apply]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Check Terraform Apply Status
        id: check-status
        run: |
          if [ "${{ needs.terraform-apply.result }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=Terraform plan executado com sucesso!" >> $GITHUB_OUTPUT
          elif [ "${{ needs.terraform-apply.result }}" = "skipped" ]; then
            echo "status=skipped" >> $GITHUB_OUTPUT
            echo "message=Nenhuma mudança na pasta infra/ detectada." >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=ERRO: Falha ao executar Terraform plan!" >> $GITHUB_OUTPUT
          fi

      - name: Send Notification
        run: |
          echo "${{ steps.check-status.outputs.message }}"
          # Adicione aqui notificações adicionais (email, Slack, etc.)
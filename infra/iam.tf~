
data "aws_iam_policy_document" "postechfiap_assume_role_policy" {
  statement {
    actions = ["sts:AssumeRole"]
    effect  = "Allow"
    principals {
      type        = "Service"
      identifiers = [
        "ec2.amazonaws.com",
        "sts.amazonaws.com",
        "lambda.amazonaws.com",
      ]
    }
  }
}

resource "aws_iam_policy" "postechfiap_policy" {
  name        = "policies_app_postechfiap_policy"
  description = "Policy for Postechfiap application"
  policy      = data.aws_iam_policy_document.policies_postechfiap.json
}

data "aws_iam_policy_document" "policies_postechfiap" {
  statement {
    sid       = "AllowIamGets"
    effect    = "Allow"
    resources = ["*"]
    actions   = [
      "iam:GetPolicy",
      "iam:GetPolicyVersion",
      "iam:GetRole"
    ]
  }

  statement {
    sid       = "BucketAccess"
    effect    = "Allow"
    resources = ["*"]
    actions   = [
      "s3:CreateBucket",
      "s3:ListBucket",
      "s3:GetObject",
      "s3:PutObject",
      "s3:DeleteObject",
      "s3:GetBucketLocation",
      "s3:ListBucketMultipartUploads",
      "s3:ListMultipartUploadParts",
      "s3:AbortMultipartUpload"
    ]
  }

  statement {
    effect    = "Allow"
    resources = ["*"]
    actions   = [
      "dynamodb:BatchGetItem",
      "dynamodb:BatchWriteItem",
      "dynamodb:DeleteItem",
      "dynamodb:GetItem",
      "dynamodb:PutItem",
      "dynamodb:Query",
      "dynamodb:Scan",
      "dynamodb:UpdateItem"
    ]
  }
}

resource "aws_iam_role_policy_attachment" "postechfiap_policy_attachment" {
  role       = aws_iam_role.postechfiap.name
  policy_arn = aws_iam_policy.postechfiap_policy.arn
}

resource "aws_iam_role" "eks_cluster_role" {
  name               = "eks-cluster-role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = ["sts:AssumeRole", "sts:TagSession"]
        Effect = "Allow"
        Principal = {
          Service = "eks.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "eks_cluster_policy_attachment" {
  role       = aws_iam_role.eks_cluster_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
}

resource "aws_iam_role" "eks_node_role" {
  name               = "eks-node-group-role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "eks_node_worker_policy_attachment" {
  role       = aws_iam_role.eks_node_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
}

resource "aws_iam_role_policy_attachment" "eks_node_cni_policy_attachment" {
  role       = aws_iam_role.eks_node_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
}

resource "aws_iam_role_policy_attachment" "eks_node_ecr_policy_attachment" {
  role       = aws_iam_role.eks_node_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
}

# data "aws_iam_policy_document" "policies_postechfiap" {
#
#   statement {
#     sid = "AllowIamGets"
#     effect = "Allow"
#     resources = ["*"]
#     actions = [
#       "iam:GetPolicy",
#       "iam:GetPolicyVersion",
#       "iam:GetRole"
#     ]
#   }
#
#   statement {
#     sid = "BucketAccess"
#     effect = "Allow"
#     resources = ["*"]
#     actions = [
#       "s3:CreateBucket",
#       "s3:ListBucket",
#       "s3:GetObject",
#       "s3:PutObject",
#       "s3:DeleteObject",
#       "s3:GetBucketLocation",
#       "s3:ListBucketMultipartUploads",
#       "s3:ListMultipartUploadParts",
#       "s3:AbortMultipartUpload"
#     ]
#   }
#
#   statement {
#     effect = "Allow"
#     resources = ["*"]
#     actions = [
#       "dynamodb:BatchGetItem",
#       "dynamodb:BatchWriteItem",
#       "dynamodb:DeleteItem",
#       "dynamodb:GetItem",
#       "dynamodb:PutItem",
#       "dynamodb:Query",
#       "dynamodb:Scan",
#       "dynamodb:UpdateItem"
#     ]
#   }
# }
#
# data "aws_iam_policy_document" "postechfiap_assume_role_policy" {
#   statement {
#     actions = ["sts:AssumeRole"]
#     effect = "Allow"
#     sid = "AssumeRole"
#     principals {
#       type = "Service"
#       identifiers = [
#         "ec2.amazonaws.com",
#         "sts.amazonaws.com",
#         "lambda.amazonaws.com",
#       ]
#     }
#   }
#
# }
#
# resource "aws_iam_role" "eks_role" {
#   name = "eks-role"
#
#   assume_role_policy = jsonencode({
#     Version = "2012-10-17"
#     Statement = [
#       {
#         Action    = "sts:AssumeRole"
#         Effect    = "Allow"
#         Principal = {
#           Service = "eks.amazonaws.com"
#         }
#       }
#     ]
#   })
# }
#
# resource "aws_iam_policy" "eks_policy" {
#   name        = "eks-policy"
#   description = "Policy for EKS cluster"
#
#   policy = jsonencode({
#     Version = "2012-10-17"
#     Statement = [
#       {
#         Action   = ["ec2:Describe*", "elasticloadbalancing:*", "ecr:*", "autoscaling:*"]
#         Effect   = "Allow"
#         Resource = "*"
#       }
#     ]
#   })
# }
#
# resource "aws_iam_role_policy_attachment" "eks_policy_attachment" {
#   role       = aws_iam_role.eks_role.name
#   policy_arn = aws_iam_policy.eks_policy.arn
# }
# ################################################################
# resource "aws_iam_role" "cluster" {
#   name = "eks-cluster-role"
#   assume_role_policy = jsonencode({
#     Version = "2012-10-17"
#     Statement = [
#       {
#         Action = [
#           "sts:AssumeRole",
#           "sts:TagSession"
#         ]
#         Effect = "Allow"
#         Principal = {
#           Service = "eks.amazonaws.com"
#         }
#       },
#     ]
#   })
# }
#
# resource "aws_iam_role_policy_attachment" "cluster_AmazonEKSClusterPolicy" {
#   policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
#   role       = aws_iam_role.cluster.name
# }
#
# resource "aws_iam_role" "node" {
#   name = "eks-node-group-role"
#
#   assume_role_policy = jsonencode({
#     Statement = [{
#       Action = "sts:AssumeRole"
#       Effect = "Allow"
#       Principal = {
#         Service = "ec2.amazonaws.com"
#       }
#     }]
#     Version = "2012-10-17"
#   })
# }
#
# resource "aws_iam_role_policy_attachment" "node-AmazonEKSWorkerNodePolicy" {
#   policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
#   role       = aws_iam_role.node.name
# }
#
# resource "aws_iam_role_policy_attachment" "node-AmazonEKS_CNI_Policy" {
#   policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
#   role       = aws_iam_role.node.name
# }
#
# resource "aws_iam_role_policy_attachment" "node-AmazonEC2ContainerRegistryReadOnly" {
#   policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
#   role       = aws_iam_role.node.name
# }